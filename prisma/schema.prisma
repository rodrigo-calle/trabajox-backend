datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id               String             @id @unique @default(uuid())
    email            String             @unique
    password         String
    firstName        String
    lastName         String
    isWorker         Boolean            @default(false)
    Profile          Profile?
    UserCareer       UserCareer[]
    UserCalification UserCalification[]
    refreshTokens    RefreshToken[]
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
}

model Profile {
    id           String         @id @unique @default(uuid())
    bio          String
    avatar       String         @default("https://res.cloudinary.com/da7ov8jyp/image/upload/v1690240475/trabajox/user_ujvrn9.png")
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String            @unique
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    Post         Post[]
    Address      Address?
    Contact      Contact?
    Calification Calification[]
}

model Post {
    id          String   @id @unique @default(uuid())
    name        String
    description String
    likes       Int
    profile     Profile  @relation(fields: [profileId], references: [id])
    profileId   String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Media       Media[]
}

model Label {
    id         String   @id @unique @default(uuid())
    name       String
    background String   @unique
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    Career     Career[]
}

model Media {
    id        String   @id @unique @default(uuid())
    mediaUrl  String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Address {
    id        String   @id @unique @default(uuid())
    country   String
    region    String
    province  String
    city      String
    profileId String      @unique
    profile   Profile  @relation(fields: [profileId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Contact {
    id        String   @id @unique @default(uuid())
    phone     String?
    whatsapp  String?
    instagram String?
    facebook  String?
    pinterest String?
    profileId String      @unique
    profile   Profile  @relation(fields: [profileId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Calification {
    id               String             @id @unique @default(uuid())
    comment          String
    stars            Int
    profileId        String
    profile          Profile            @relation(fields: [profileId], references: [id])
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    UserCalification UserCalification[]
}

model Career {
    id          String       @id @unique @default(uuid())
    name        String       @unique
    description String
    label       Label        @relation(fields: [labelId], references: [id])
    labelId     String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    UserCareer  UserCareer[]
}

model UserCareer {
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    career     Career   @relation(fields: [careerId], references: [id])
    careerId   String
    assignedAt DateTime @default(now())
    assignedBy String

    @@id([userId, careerId])
}

model UserCalification {
    user           User         @relation(fields: [userId], references: [id])
    userId         String
    calification   Calification @relation(fields: [calificationId], references: [id])
    calificationId String
    assignedAt     DateTime     @default(now())
    assignedBy     String

    @@id([userId, calificationId])
}

model RefreshToken {
    id          String   @id @unique @default(uuid())
    hashedToken String
    userId      String
    User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    revoked     Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
